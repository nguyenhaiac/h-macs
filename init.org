#+title: emacs configuration file
#+author: nguyen tien hai
#+babel: :cache yes
#+property: header-args :tangle ~/.emacs.d/init.el
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

* initialize the configuration
** tangle & byte compile

tangle and byte compile

#+begin_src emacs-lisp :tangle yes
  (defun my--tangle-byte-compile-org ()
   "tangles emacs.org and byte compiles ~/.emacs.d/"
     (interactive)
     (when (equal (buffer-name)
                  (concat "init.org"))
       (org-babel-tangle)
       (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))
#+end_src

tangle

#+begin_src emacs-lisp :tangle yes
(defun my--tangle-org ()
 "tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)))
(add-hook 'after-save-hook #'my--tangle-org)

#+end_src
** bootstrap straight.el
*** install straight.el if not yet
#+begin_src emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
*** install use-package and set it to use straight by default
#+begin_src emacs-lisp :tangle yes
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package 'org-plus-contrib)
#+end_src

** better-default 
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq
   default-frame-alist '((font . "caskaydiacove nerd font-10"))
   tool-bar-mode nil
   menu-bar-mode nil)
#+end_src
#+begin_src emacs-lisp
  (modify-syntax-entry ?_ "w")
  (setq org-src-window-setup 'split-window-below)
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper) ; menu/app key
  (ido-mode nil)
  (use-package gcmh
    :config
    (gcmh-mode 1))
  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (use-package better-defaults)
  (global-hl-line-mode 1)
  (setq-default cursor-type 'bar)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq create-lockfiles nil)  ; stop creating .# files
  (global-auto-revert-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq
   cursor-in-non-selected-windows t  ; hide the cursor in inactive windows
   inhibit-splash-screen t
   echo-keystrokes 0.1               ; show keystrokes right away, don't show the message in the scratch buffe
   initial-scratch-message nil       ; empty scratch buffer
   initial-major-mode 'org-mode      ; org mode by default
   custom-safe-themes t
   confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
   )
  (setq-default global-visual-line-mode)
  (ido-mode nil)
  (add-hook 'org-mode-hook 'hl-line-mode)
  (setq line-spacing 0.15)
  (lambda () (progn
    (setq left-margin-width 2)
    (setq right-margin-width 2)
    (set-window-buffer nil (current-buffer))))
  (setq org-tags-column 100)
  (set-frame-parameter (selected-frame) 'alpha '(92 92))
  (add-to-list 'default-frame-alist '(alpha 92 92))
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "scheme")))
  (setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
#+end_src
** detect system
#+begin_src emacs-lisp
  ;; check if system is microsoft windows
  (defun my-system-type-is-windows ()
    "return true if system is windows-based (at least up to win7)"
    (string-equal system-type "windows-nt")
    )

  ;; check if system is gnu/linux
  (defun my-system-type-is-gnu ()
    "return true if system is gnu/linux-based"
    (string-equal system-type "gnu/linux")
    )
#+end_src
* aesthetic improvement
** doom themes
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t))
#+end_src
** kaolin themes
#+begin_src emacs-lisp :tangle yes
  (use-package kaolin-themes
    :config
    (load-theme 'kaolin-ocean))
#+end_src
** smart-mode-line
#+begin_src emacs-lisp :tangle no
  (use-package smart-mode-line-atom-one-dark-theme)
  (use-package smart-mode-line
    :config
    (setq sml/theme 'respectful)
    (sml/setup)
    (add-to-list 'sml/replacer-regexp-list '("^~/dropbox/" ":dbox:")))
#+end_src
** material theme
#+begin_src emacs-lisp
  (use-package flatland-theme)
#+end_src
** doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-lsp t
          doom-modeline-env-enable-python t
          doom-modeline-project-detection 'project))
#+end_src
** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src
* utilities setup
** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :hook 
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Dropbox/brain")
    (org-roam-graph-executable "/usr/bin/dot")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-show-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert)
                 ("C-c n c" . org-roam-capture))))
  (use-package company-org-roam
    :straight (:host github :repo "jethrokuan/company-org-roam")
    :config
    (push 'company-org-roam company-backends))
#+end_src
** evil
#+begin_src emacs-lisp :tangle no
  (use-package evil
    :init
    (setq evil-disable-insert-state-bindings t
          evil-want-C-i-jump t
          evil-want-C-u-scroll t
          evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-mode t))
#+end_src

#+RESULTS:
: t

** Corral
#+begin_src emacs-lisp
  (use-package corral
    :config
    (global-set-key (kbd "M-9") 'corral-parentheses-backward)
    (global-set-key (kbd "M-0") 'corral-parentheses-forward)
    (global-set-key (kbd "M-[") 'corral-brackets-backward)
    (global-set-key (kbd "M-]") 'corral-brackets-forward)
    (global-set-key (kbd "M-{") 'corral-braces-backward)
    (global-set-key (kbd "M-}") 'corral-braces-forward)
    (global-set-key (kbd "M-\"") 'corral-double-quotes-backward))
#+end_src
** lispy
#+begin_src emacs-lisp :tangle yes
  (use-package lispy
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'scheme-mode-hook (lambda () (lispy-mode 1))))
#+end_src
** org-pomodoro
   :logbook:
   clock: [2020-03-30 mon 15:26]--[2020-03-30 mon 15:27] =>  0:01
   clock: [2020-03-30 mon 15:25]--[2020-03-30 mon 15:26] =>  0:01
   :end:
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :config
    (setq org-pomodoro-length 30))
  (defun my/org-pomodoro-text-time ()
    "return status info about org-pomodoro and if org-pomodoro is not running, try to print info about org-clock.
      if either org-pomodoro or org-clock aren't active, print \"no active task \" "
    (interactive)
    (cond ((equal :none org-pomodoro-state)
           (if (org-clock-is-active)
               (format "clocked task: %d minutes - %s"
                       (org-clock-get-clocked-time) (substring-no-properties org-clock-heading)
                       "no active task")))
          ((equal :pomodoro org-pomodoro-state)
           (format "%d - pomodoro: %d minutes - %s"
                   org-pomodoro-count (/ (org-pomodoro-remaining-seconds) 60) (substring-no-properties org-clock-heading)))
          ((equal :short-break org-pomodoro-state) "short break")
          ((equal :long-break org-pomodoro-state)  "long break")))
#+end_src

** Acewindows
#+begin_src emacs-lisp
  (use-package ace-window
    :init
    (setq aw-background t)
    (setq aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i))
    (setq aw-dispatch-always t))
  (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
          (?m aw-swap-window "Swap Windows")
          (?M aw-move-window "Move Window")
          (?c aw-copy-window "Copy Window")
          (?j aw-switch-buffer-in-window "Select Buffer")
          (?l aw-flip-window)
          (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
          (?k aw-split-window-fair "Split Fair Window")
          (?v aw-split-window-vert "Split Vert Window")
          (?b aw-split-window-horz "Split Horz Window")
          (?o delete-other-windows "Delete Other Windows")
          (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
  (global-set-key (kbd "M-o") 'ace-window)
#+end_src
** winnum mode
#+begin_src emacs-lisp
  (use-package winum
    :config
    (winum-mode)
    (winum-set-keymap-prefix (kbd "C-c")))
#+end_src
** geiser
#+begin_src emacs-lisp :tangle yes
  (use-package geiser
    :config
    (setq geiser-active-implementations '(guile))
    )
#+end_src
** Bookmark plus
#+begin_src emacs-lisp
  (use-package bookmark+)
#+end_src
** org-source code
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (scheme . t)))
#+end_src
** sicp book
#+begin_src emacs-lisp
  (use-package sicp)
#+end_src
** hyperbole
#+begin_src emacs-lisp
  (use-package hyperbole)
#+end_src
** ivy and counsel bundle
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil) )
  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1))
  (use-package avy)
#+end_src
** autocompletion with company-mode
#+begin_src emacs-lisp
  (use-package company
      :config
      (setq company-idle-delay 0.0
            company-minimum-prefix-length 1)
      (global-company-mode))
#+end_src
** whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode)
    (require 'smartparens-config))
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** undo-fu
#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src

** deadgrep
#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src
** org-mode gtd
*** settings
#+begin_src emacs-lisp
  (require 'org-habit)
  (setq org-agenda-files (list "~/dropbox/orggtd/todo.org"
                               "~/dropbox/orggtd/mobile.org"
                               "~/onedrive - abb/tender.org"
                               "~/dropbox/orggtd/emacs-bindings.org"))
  (setq org-refile-files (list "~/dropbox/orggtd/todo.org"
                               "~/dropbox/orggtd/mobile.org"
                               "~/onedrive - abb/tender.org"
                               "~/dropbox/orggtd/someday.org"
                               "~/dropbox/orggtd/references.org"))
  (setq spacemacs-theme-org-agenda-height nil
        org-agenda-start-day "-1d"
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-include-diary t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-with-log-mode t
        org-habit-following-days 7
        org-habit-preceding-days 10
        org-habit-show-habits-only-for-today t
        org-agenda-tags-column -102
        org-habit-graph-column 50
        org-clock-out-remove-zero-time-clocks t
        org-clock-out-when-done t
        org-clock-persist t)
#+end_src
*** org-todo keywords
#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(("todo" . org-warning)
          ("strt" . "yellow")
          ("next" . "orange")
          ("wait" . "gray")
          ("toread" . "green")
          ("canceled" . (:foreground "blue" :weight bold))))
  (setq org-todo-keywords
        '((sequence
           "todo(t)"  ; a task that needs doing & is ready to do
           "next(n)"
           "strt(s)"  ; a task that is in progress
           "wait(w)"  ; something is holding up this task; or it is paused
           "toread(r)"
           "|"
           "done(d)"  ; task successfully completed
           "phone(p)"
           "read(r)"
           "meeting(m)"
           "kill(k)")))
#+end_src
** deft and zetteldeft
#+begin_src emacs-lisp
  (use-package deft
    :init
    (setq deft-extensions '("org" "md")
          deft-recursive t
          deft-directory "~/dropbox/archives"
          deft-use-filename-as-title t
          deft-file-naming-rules '((noslash . "-")
                                   (nospace . "-")
                                   (case-fn . downcase))))
  (use-package zetteldeft
    :after deft)
#+end_src
* programming setup
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1))
#+end_src
** emmet-mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode)
    (setq emmet-self-closing-tag-style " /"))
#+end_src
** webmode
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist '(("django" . "\\.html\\'")))
    (setq web-mode-enable-auto-pairing nil))
#+end_src
** magit - the king of git
#+begin_src emacs-lisp :tangle yes
 (use-package magit)
#+end_src
** python with elpy
#+begin_src emacs-lisp :tangle yes
  (use-package elpy
    :if (my-system-type-is-windows)
    :config
    (elpy-enable))
#+end_src
** blacken
#+begin_src emacs-lisp
  (use-package blacken)
#+end_src
** python debugging with realgud
#+begin_src emacs-lisp :tangle yes
  (use-package realgud)
#+end_src
** python with lsp mode
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :if (my-system-type-is-gnu)
    :commands lsp
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (python-mode . lsp))
#+end_src
** pyvenv
#+begin_src emacs-lisp :tangle yes
  (use-package pyvenv)
#+end_src
** c programming setup
#+begin_src emacs-lisp :tangle yes
  (use-package company-irony
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :hook ((c++-mode-hook . irony-mode)
           (c-mode-hook . irony-mode)
           (irony-mode-hook . irony-cdb-autosetup-compile-options)))
#+end_src
** vterm
#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :if (my-system-type-is-gnu))
  (use-package vterm-toggle
    :straight (vterm-toggle :type git :host github :repo "jixiuf/vterm-toggle")
    :if (my-system-type-is-gnu)
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '("^v?term.*"
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src
** rustic - rust mode for emacs
#+begin_src emacs-lisp :tangle yes
  (use-package rustic)
#+end_src
** yaml-mode
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode)
#+end_src
* helper functions
** find book and open it with org noter 
#+begin_src emacs-lisp
  (defun my-findbook-counsel-fzf ()
      (interactive)
    (let ((counsel-fzf-cmd "find ~/dropbox/calibre | grep -e \"(*.pdf)\" | fzf -f \"%s\" "))
    (counsel-fzf)))
#+end_src
** copy-line
#+begin_src emacs-lisp
    (defun copy-line (arg)
      "copy lines (as many as prefix argument) in the kill ring.
        ease of use features:
        - move to start of next line.
        - appends the copy on sequential calls.
        - use newline as last char even on the last line of the buffer.
        - if region is active, copy its lines."
      (interactive "p")
      (let ((beg (line-beginning-position))
            (end (line-end-position arg)))
        (when mark-active
          (if (> (point) (mark))
              (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
            (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
        (if (eq last-command 'copy-line)
            (kill-append (buffer-substring beg end) (< end beg))
          (kill-ring-save beg end)))
      (kill-append "\n" nil)
      (beginning-of-line (or (and arg (1+ arg)) 2))
      (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))
#+end_src
* Keybindings
#+begin_src emacs-lisp
  (use-package general)
  ;  (general-evil-setup)
  (general-define-key "<menu>" (general-simulate-key "C-c"))
  (general-define-key
   "C-z" 'undo-fu-only-undo
   "C-s-z" 'undo-fu-only-redo)
  (general-define-key
   "H-t" 'vterm-toggle)
  (use-package key-chord :config (key-chord-mode t))
  (general-define-key
   :keymap org-mode-map
   "H-i" 'org-pomodoro)
  (defun def-rep-command (alist)
    "Return a lambda that calls the first function of ALIST. It sets the transient map to all functions of ALIST, allowing you to repeat those functions as needed."
    (lexical-let ((keymap (make-sparse-keymap))
                  (func (cdar alist)))
      (mapc (lambda (x)
              (when x
                (define-key keymap (kbd (car x)) (cdr x))))
            alist)
      (lambda (arg)
        (interactive "p")
        (when func
          (funcall func arg))
        (set-transient-map keymap t))))
  (key-chord-define-global "yy"   
        (def-rep-command
         '(nil
           ("n" . windmove-left)
           ("i" . windmove-right)
           ("e" . windmove-down)
           ("u" . windmove-up)
           ("y" . other-window)
           ("h" . ace-window)
           ("s" . (lambda () (interactive) (ace-window 4)))
           ("d" . (lambda () (interactive) (ace-window 16)))
           )))
  (key-chord-define-global "hh"   
        (def-rep-command
         '(nil
           ("-" . text-scale-decrease)
           ("=" . text-scale-increase)
           )))
  (general-define-key
   :prefix "C-c"
   "c" 'avy-goto-char-timer
   "w" 'avy-goto-word-0
   )


  (general-define-key
   :keymaps 'lispy-mode-map
   "u" 'special-lispy-up
   "e" 'special-lispy-down
   "n" 'special-lispy-left
   "i" 'special-lispy-right
   "k" 'special-lispy-undo
   "j" 'special-lispy-eval
   "l" 'special-lispy-tab
   "h" 'special-lispy-new-copy)
#+end_src

#+RESULTS:

