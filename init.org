#+title: emacs configuration file
#+author: nguyen tien hai
#+babel: :cache yes
#+property: header-args :tangle ~/.emacs.d/init.el
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

* Initialize the configuration 
** Tangle & byte compile
*** Tangle and byte compile

#+begin_src emacs-lisp :tangle yes
  (defun my--tangle-byte-compile-org ()
   "tangles emacs.org and byte compiles ~/.emacs.d/"
     (interactive)
     (when (equal (buffer-name)
                  (concat "init.org"))
       (org-babel-tangle)
       (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))
#+end_src

*** Tangle

#+begin_src emacs-lisp :tangle yes
(defun my--tangle-org ()
 "tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)))
(add-hook 'after-save-hook #'my--tangle-org)

#+end_src

** Bootstrap straight.el
*** install straight.el if not yet

    #+begin_src emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

  #+end_src
  
*** install use-package and set it to use straight by default

    #+begin_src emacs-lisp :tangle yes
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (straight-use-package 'org-plus-contrib)
  #+end_src
  
** Better-default 
#+begin_src emacs-lisp
  (setq
   tool-bar-mode nil
   menu-bar-mode nil)
  (require 'org-tempo)
#+end_src
#+begin_src emacs-lisp
  (setq org-src-window-setup 'split-window-below)
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper) ; menu/app key
  (use-package gcmh
    :config
    (gcmh-mode 1))
  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (use-package better-defaults)
  (global-hl-line-mode 1)
  (setq-default cursor-type 'bar)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq create-lockfiles nil)  ; stop creating .# files
  (global-auto-revert-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq
   cursor-in-non-selected-windows t  ; hide the cursor in inactive windows
   inhibit-splash-screen t
   echo-keystrokes 0.1               ; show keystrokes right away, don't show the message in the scratch buffe
   initial-scratch-message nil       ; empty scratch buffer
   initial-major-mode 'org-mode      ; org mode by default
   custom-safe-themes t
   confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
   )
  (add-hook 'org-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (setq line-spacing 0.5)
  (lambda () (progn
    (setq left-margin-width 1)
    (setq right-margin-width 1)
    (set-window-buffer nil (current-buffer))))
  (setq org-tags-column 100)
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "scheme")))
  (setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
#+end_src
** Detect system
#+begin_src emacs-lisp
  ;; check if system is microsoft windows
  (defun my-system-type-is-windows ()
    "return true if system is windows-based (at least up to win7)"
    (string-equal system-type "windows-nt")
    )

  ;; check if system is gnu/linux
  (defun my-system-type-is-gnu ()
    "return true if system is gnu/linux-based"
    (string-equal system-type "gnu/linux")
    )
#+end_src

* Aesthetic improvement 
** Theme
   #+begin_src emacs-lisp
     ;; (use-package doom-themes)
     ;; (load-theme 'doom-gruvbox)
     (use-package gruvbox-theme
       :straight (gruvbox-theme :type git
                                :host github
                                :repo "greduan/emacs-theme-gruvbox"
                                ))
     (use-package color-theme-sanityinc-tomorrow)
     (use-package leuven-theme)
     (use-package modus-operandi-theme)
     (use-package modus-vivendi-theme)
     (load-theme 'modus-operandi)
   #+end_src
** Smart-mode-line
 #+begin_src emacs-lisp :tangle no
  (use-package smart-mode-line-atom-one-dark-theme)
  (use-package smart-mode-line
    :config
    (setq sml/theme 'respectful)
    (sml/setup)
    (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":dbox:")))
#+end_src
** Doom-modeline
#+begin_src emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-lsp t
          doom-modeline-env-enable-python t
          doom-modeline-project-detection 'project))
#+end_src
** Rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src
* Faces for emacs
#+begin_src emacs-lisp
  (when (my-system-type-is-gnu)
    (set-face-attribute 'default nil :font "Hack Nerd Font-11")
    (set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font-11")
    )

  (when (my-system-type-is-windows)
    (set-face-attribute 'default nil :font "CaskaydiaCove NF-11")
    (set-face-attribute 'fixed-pitch nil :font "Caskaydiacove NF-11")
    )

  (set-face-attribute 'variable-pitch nil :font "Source Sans Pro-13")  


  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (custom-theme-set-faces
   'user
   `(org-level-1 ((t (:height 1.25))))
   `(org-level-2 ((t (:height 1.15))))
   `(org-level-3 ((t (:height 1.1))))
   `(org-level-4 ((t (:height 1)))))
  (add-to-list 'default-frame-alist
               '(font . "Hack Nerd Font-12")
               '(font . "CaskaydiaCove-12"))
#+end_src
* Keybindings
#+begin_src emacs-lisp
  (use-package general)
  ;; (general-evil-setup)

  (general-create-definer my-leader-def
    ;; :states '(normal visual insert emacs)
    :keymaps 'override
    ;; :prefix "SPC"
    :prefix "C-c"
    ;; :non-normal-prefix "C-c"
    )

  (general-create-definer my-local-leader-def
    ;; :keymaps '(normal visual insert emacs)
    ;; :prefix "SPC m"
    :prefix "C-c m"
    ;; :non-normal-prefix "C-c m"
    )

  (defun my-find-book ()
    (interactive)
    (let ((counsel-fzf-cmd "find ~/Dropbox/Calibre | grep -e pdf | fzf -f \"%s\""))
      (counsel-fzf)))

  (my-leader-def
    "j" '(:ignore t :wk "Avy")
    "jj" '(avy-goto-char-timer)
    "f" '(:ignore t :wk "files")
    "ff" 'helm-find-files
    "fF" 'find-file-other-window
    "fb" 'my-find-book
    "fs" 'save-buffer
    "fp" '(lambda () (interactive) (find-file "~/.emacs.d/init.org"))
    "fd" 'dired-sidebar-toggle-with-current-directory
    "g" '(:ignore t :wk "Magit")
    "gg" 'magit-status
    "gs" 'magit-dispatch
    "e" '(:ignore t :wk "Eval")
    "eb" 'eval-buffer
    "ee" 'eval-last-sexp
    "er" 'eval-region
    "o" '(:ignore t :wk "Org")
    "ol" 'org-store-link
    "ow" 'olivetti-mode
    "oa" 'org-agenda
    "op" 'my-mark-as-project
    "ot" 'my-mark-as-task
    "c" 'org-capture 
    "b" '(:ignore t :wk "Buffer")
    "bb" 'switch-to-buffer
    "bk" 'kill-buffer
    "bi" 'ibuffer
    "bw" '(switch-to-buffer-other-window :wk "Other windows")
    "b." 'next-buffer
    "b," 'previous-buffer
    "-" 'text-scale-decrease
    "+" 'text-scale-increase
    )

  (general-define-key
   "C-z" 'undo-fu-only-undo
   "C-S-z" 'undo-fu-only-redo)
    #+end_src

* Utilities setup
** Dired+
   #+begin_src emacs-lisp
     (use-package dired+
       :init
       (setq diredp-hide-details-initially-flag nil))
     (add-hook 'dired-before-readin-hook
               'diredp-breadcrumbs-in-header-line-mode)
   #+end_src
** Dired all the icons
   #+begin_src emacs-lisp
     (use-package all-the-icons-dired
       :straight (all-the-icons-dired :type git
                                     :host github
                                     :repo
                                     "jtbm37/all-the-icons-dired"))
     (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
   #+end_src
** Dired sidebar
   #+begin_src emacs-lisp
     (use-package dired-sidebar
       :commands (dired-sidebar-toggle-sidebar)
       :init
       (add-hook 'dired-sidebar-mode-hook
                 (lambda ()
                   (unless (file-remote-p default-directory)
                     (auto-revert-mode))))
       :config
       (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
       (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

       (setq dired-sidebar-subtree-line-prefix "__")
       (setq dired-sidebar-theme 'icons)
       (setq dired-sidebar-use-term-integration t)
       (setq dired-sidebar-use-custom-font t))
   #+end_src
** elfeed
   #+begin_src emacs-lisp
     (use-package password-store)
     (use-package elfeed
       :config
       (setq elfeed-db-directory "~/.cache/.elfeed")
       (add-hook 'elfeed-search-update-hook 'elfeed-protocol-enable))

     (use-package elfeed-protocol
       :after elfeed
       :defer t
       :init
       (setq elfeed-feeds (list
                           (list "ttrss+https://admin@rss.hainguyentien.com"
                                 :password "6uv73rxT8ygdPuX"))))

     (setq elfeed-protocol-ttrss-maxsize 200) ; bigger than 200 is invalid

     (add-hook 'elfeed-new-entry-hook
               (elfeed-make-tagger :feed-url "youtube\\.com"
                                   :add '(video youtube))
               (elfeed-make-tagger :feed-title "Python"
                                   :add '(python programming)))

     (defun elfeed-play-with-mpv ()
       "Play entry link with mpv."
       (interactive)
       (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
             (quality-arg "")
             (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
         (setq quality-val (string-to-number quality-val))
         (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
         (when (< 0 quality-val)
           (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
         (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

     (defvar elfeed-mpv-patterns
       '("youtu\\.?be")
       "List of regexp to match against elfeed entry link to know
     whether to use mpv to visit the link.")

     (defun elfeed-visit-or-play-with-mpv ()
       "Play in mpv if entry link matches `elfeed-mpv-patterns', visit otherwise.
     See `elfeed-play-with-mpv'."
       (interactive)
       (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
             (patterns elfeed-mpv-patterns))
         (while (and patterns (not (string-match (car elfeed-mpv-patterns) (elfeed-entry-link entry))))
           (setq patterns (cdr patterns)))
         (if patterns
             (elfeed-play-with-mpv)
           (if (eq major-mode 'elfeed-search-mode)
               (elfeed-search-browse-url)
             (elfeed-show-visit)))))

     (my-leader-def
       "e" '(:ignore t :wk "elfeed")
       "eo" 'elfeed-visit-or-play-with-mpv
       "ee" 'elfeed
       "eE" 'elfeed-protocol-ttrss-update
       "eu" 'elfeed-update
       )
   #+end_src
** Password-store-get
   #+begin_src emacs-lisp
     (use-package password-store)
   #+end_src
** Leetcode
   #+begin_src emacs-lisp
     (use-package leetcode
       :config
       (setq leetcode-prefer-language "python3"
             leetcode-prefer-sql "mysql"
             leetcode-save-solutions t
             leetcode-directory "~/leetcode"))
   #+end_src
** pdf-tools
   #+begin_src emacs-lisp
     (use-package pdf-tools   
       :config   (pdf-tools-install)   
       (setq-default pdf-view-display-size 'fit-page))
     (use-package org-pdftools
       :hook (org-load . org-pdftools-setup-link))

     (use-package org-noter-pdftools
       :after org-noter
       :config
       (with-eval-after-load 'pdf-annot
         (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
   #+end_src
** Org-noter
   #+begin_src emacs-lisp
     (use-package org-noter
       :config
       (setq org-noter-notes-search-path '("~/Dropbox/brain/notes")))

   #+end_src
** anki-editor
   #+begin_src emacs-lisp
     (use-package anki-editor)
     (setq request-log-level 'debug)
   #+end_src
** Org-download
   #+begin_src emacs-lisp
     (use-package org-download)
     (setq-default org-download-image-dir "~/Dropbox/brain/image")
     (when (my-system-type-is-windows)
       (setq org-download-screenshot-method "magick convert clipboard: %s")
       )
   #+end_src
** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :hook 
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Dropbox/Zettel"))
  (use-package company-org-roam
    :straight (:host github :repo "jethrokuan/company-org-roam")
    :config
    (push 'company-org-roam company-backends))
  (when (my-system-type-is-gnu)
    (setq org-roam-graph-executable "/usr/bin/dot"))
  (when (my-system-type-is-windows)
    (setq org-roam-graph-executable "c:/Program Files (x86)/Graphviz2.38/bin/dot"))
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "%<%Y%m%d%H%M%S>-${slug}"
          :head "#+TITLE: ${title}\n"
          :unnarrowed t)
         ("c" "from notes" plain (function org-roam--capture-get-point)
          "%i"
          :file-name "%<%Y%m%d%H%M%S>-${slug}"
          :head "#+TITLE: ${title}\n"
          :unnarrowed t))
        )
  (require 'org-roam-protocol)

  (defun my/org-roam--backlinks-list-with-content (file)
    (with-temp-buffer
      (if-let* ((backlinks (org-roam--get-backlinks file))
                (grouped-backlinks (--group-by (nth 0 it) backlinks)))
          (progn
            (insert (format "\n\n* %d Backlinks\n"
                            (length backlinks)))
            (dolist (group grouped-backlinks)
              (let ((file-from (car group))
                    (bls (cdr group)))
                (insert (format "** [[file:%s][%s]]\n"
                                file-from
                                (org-roam--get-title-or-slug file-from)))
                (dolist (backlink bls)
                  (pcase-let ((`(,file-from _ ,props) backlink))
                    (insert (s-trim (s-replace "\n" " " (plist-get props :content))))
                    (insert "\n\n")))))))
      (buffer-string)))


  (defun my/org-export-preprocessor (backend)
    (let ((links (my/org-roam--backlinks-list-with-content (buffer-file-name))))
      (unless (string= links "")
        (save-excursion
          (goto-char (point-max))
          (insert (concat "\n* Backlinks\n") links)))))

  (add-hook 'org-export-before-processing-hook 'my/org-export-preprocessor)

  (my-leader-def
    "r" '(:ignore t :wk roam)
    "rr" 'org-roam
    "rf" 'org-roam-find-file
    "ri" 'org-roam-insert
    "rc" 'org-roam-capture)
  (setq org-roam-db-location "~/Dropbox/brain/roamdb/roam-home.db")
#+end_src
** Org-capture advice
   #+begin_src emacs-lisp
     (defadvice org-capture
         (after make-full-window-frame activate)
       "Advise capture to be the only window when used as a popup"
       (if (equal "emacs-capture" (frame-parameter nil 'name))
           (delete-other-windows)))

     (defadvice org-capture-finalize
         (after delete-capture-frame activate)
       "Advise capture-finalize to close the frame"
       (if (equal "emacs-capture" (frame-parameter nil 'name))
           (delete-frame)))
     (defun org-journal-find-location ()
       ;; Open today's journal, but specify a non-nil prefix argument in order to
       ;; inhibit inserting the heading; org-capture will insert the heading.
       (org-journal-new-entry t)
       ;; Position point on the journal's top-level heading so that org-capture
       ;; will add the new entry as a child entry.
       (goto-char (point-min)))

     (setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                                    "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
   #+end_src
** lispy
#+begin_src emacs-lisp :tangle yes
  (use-package lispy
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'scheme-mode-hook (lambda () (lispy-mode 1))))
#+end_src
** Acewindows
#+begin_src emacs-lisp
  (use-package ace-window
    :init
    (setq aw-background t)
    (setq aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i)))
  (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
          (?m aw-swap-window "Swap Windows")
          (?M aw-move-window "Move Window")
          (?c aw-copy-window "Copy Window")
          (?j aw-switch-buffer-in-window "Select Buffer")
          (?l aw-flip-window)
          (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
          (?k aw-split-window-fair "Split Fair Window")
          (?v aw-split-window-vert "Split Vert Window")
          (?b aw-split-window-horz "Split Horz Window")
          (?o delete-other-windows "Delete Other Windows")
          (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
  (global-set-key (kbd "M-o") 'ace-window)
  (my-leader-def
    "w" '(:ignore t :wk "windows")
    "wD" 'delete-window
    "wn" 'windmove-left
    "wi" 'windmove-right
    "we" 'windmove-down
    "wu" 'windmove-up
    "ww" 'ace-window
    "wd" '(lambda () (interactive) (ace-window 16))
    "ws" '(lambda () (interactive) (ace-window 4))
    )
#+end_src
** geiser
#+begin_src emacs-lisp :tangle yes
  (use-package geiser
    :config
    (setq geiser-active-implementations '(guile))
    )
#+end_src
** org-source code
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (scheme . t)
     (python . t)
     (shell . t)
     (C . t)
     ))
#+end_src
** sicp book
#+begin_src emacs-lisp
  (use-package sicp)
#+end_src
** ivy and counsel bundle
#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil))
  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1))
  (use-package avy)

#+end_src
** Helm
   #+begin_src emacs-lisp :tangle yes
     (use-package helm
       :config
       (helm-mode 1))
   #+end_src
** autocompletion with company-mode
#+begin_src emacs-lisp
  (use-package company
      :config
      (setq company-idle-delay 0.0
            company-minimum-prefix-length 1)
      (global-company-mode))
#+end_src
** whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode)
    (require 'smartparens-config))
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-superstar
    :config (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
  (setq inhibit-compacting-font-caches t)
  (setq org-hide-emphasis-markers nil)
  (setq org-superstar-headline-bullets-list (quote ("◉" "◆" "☀" "○")))
#+end_src
** undo-fu
#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src
** deadgrep
#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src
* Programming setup
** magit - the king of git
#+begin_src emacs-lisp :tangle yes
  (use-package magit)
#+end_src
** Python debugging with realgud
#+begin_src emacs-lisp :tangle yes
  (use-package realgud)
#+end_src
** Python with lsp mode
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :if (my-system-type-is-gnu)
    :commands lsp
    :hook
    (lsp-mode . lsp-enable-which-key-integration))

  (use-package lsp-pyright
    :straight (lsp-pyright :type git :host github :repo "emacs-lsp/lsp-pyright")
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred

  (use-package lsp-ui
    :config
    (setq lsp-ui-doc-enable nil
          lsp-ui-doc-delay 0.1
          lsp-ui-doc-position 'bottom
          lsp-ui-peek-enable t))


  (my-local-leader-def
    "gd" 'lsp-find-definition
    "gi" 'lsp-find-implementation)
#+end_src
** Python with elpy
   #+begin_src emacs-lisp :tangle no
     (use-package elpy
       :defer t
       :init
       (advice-add 'python-mode :before 'elpy-enable))
     (setq company-idle-delay 0
           company-minimum-prefix-length 1)
   #+end_src
** Yasnipet
   #+begin_src emacs-lisp
     (use-package yasnippet)
     (yas-global-mode 1)
   #+end_src
** Pyvenv
#+begin_src emacs-lisp :tangle yes
  (use-package pyvenv)
#+end_src
** Vterm
#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :if (my-system-type-is-gnu))

  (use-package vterm-toggle
    :straight (vterm-toggle :type git :host github :repo "jixiuf/vterm-toggle")
    :if (my-system-type-is-gnu)
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '("^v?term.*"
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3)))
    (define-key vterm-mode-map (kbd "<C-backspace>")
      (lambda () (interactive) (vterm-send-key (kbd "C-w"))))
    (defun vterm-counsel-yank-pop-action (orig-fun &rest args)
      (if (equal major-mode 'vterm-mode)
          (let ((inhibit-read-only t)
                (yank-undo-function (lambda (_start _end) (vterm-undo))))
            (cl-letf (((symbol-function 'insert-for-yank)
                       (lambda (str) (vterm-send-string str t))))
              (apply orig-fun args)))
        (apply orig-fun args)))
    (advice-add 'counsel-yank-pop-action :around #'vterm-counsel-yank-pop-action))
#+end_src
** Yaml-mode
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode)
#+end_src
** Projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :config
       (projectile-mode 1)
       (setq projectile-sort-order 'recentf
             projectile-enable-caching t
             projectile-completion-system 'ivy
             projectile-switch-project-action #'projectile-dired)
       (my-leader-def
         "p" 'projectile-command-map))
   #+end_src
* Evil-mode
#+begin_src emacs-lisp :tangle no
  (use-package evil
    :init
    (setq evil-disable-insert-state-bindings t
          evil-want-C-i-jump t
          evil-want-C-u-scroll t
          evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-set-initial-state 'magit-mode 'emacs)
    (evil-set-initial-state 'info-mode 'emacs)
    (evil-mode t))

  (use-package evil-commentary)
  (evil-commentary-mode)

  (use-package evil-snipe)
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1)
#+end_src
* Evil colection
  #+begin_src emacs-lisp :tangle no
    (use-package evil-collection
      :init
      (evil-collection-init '(dired calendar elfeed leetcode realgud)))
  #+end_src
* Org-edna
  #+begin_src emacs-lisp
    (use-package org-edna)
    (org-edna-mode)
  #+end_src
* Olivetti
  #+begin_src emacs-lisp
    (use-package olivetti)
  #+end_src
* Org-mode config
  #+begin_src emacs-lisp
    (setq org-agenda-files '("~/Dropbox/Zettel/todo.org"))
    (push 'org-habit org-modules)
    (setq org-habit-show-habits-only-for-today nil)

    (setq org-capture-templates
          '(("t" "Todo" entry (file "~/Dropbox/Zettel/todo.org")
             "* TODO %?\n %i\n")
            ("n" "Notes" entry (file "~/Dropbox/Zettel/20200829215348-brains.org")
             "* %?\n %i\n")))

    (setq org-tags-exclude-from-inheritance '("project" "crypt"))

    (defun my-mark-as-task ()
    "This function makes sure that the current heading has
    (2) has property COOKIE_DATA set to \"todo recursive\"
    (3) has any TODO keyword and
    (4) a leading progress indicator"
        (interactive)
        (org-set-property "COOKIE_DATA" "todo recursive") 
        (org-set-property "ORDERED" "t")
        (org-set-property "TRIGGER" "next-sibbling todo!(NEXT)")
        (org-back-to-heading t)
        (let* ((title (nth 4 (org-heading-components)))
               (keyword (nth 2 (org-heading-components))))
           (when (and (bound-and-true-p keyword) (string-prefix-p "[" title))
               (message "TODO keyword and progress indicator found")
               )
           (when (and (not (bound-and-true-p keyword)) (string-prefix-p "[" title))
               (message "no TODO keyword but progress indicator found")
               (forward-whitespace 1)
               (insert "TODO ")
               )
           )
    )

    (defun my-mark-as-project ()
    "This function makes sure that the current heading has
    (1) the tag :project:
    (2) has property COOKIE_DATA set to \"todo recursive\"
    (3) has any TODO keyword and
    (4) a leading progress indicator"
        (interactive)
        (org-toggle-tag "project" 'on)
        (org-set-property "COOKIE_DATA" "todo recursive")
        (org-set-property "ORDERED" "t")
        (org-set-property "TRIGGER" "next-sibbling todo!(NEXT)")
        (org-back-to-heading t)
        (let* ((title (nth 4 (org-heading-components)))
               (keyword (nth 2 (org-heading-components))))
           (when (and (bound-and-true-p keyword) (string-prefix-p "[" title))
               (message "TODO keyword and progress indicator found")
               )
           (when (and (not (bound-and-true-p keyword)) (string-prefix-p "[" title))
               (message "no TODO keyword but progress indicator found")
               (forward-whitespace 1)
               (insert "NEXT ")
               )
           (when (and (not (bound-and-true-p keyword)) (not (string-prefix-p "[" title)))
               (message "no TODO keyword and no progress indicator found")
               (forward-whitespace 1)
               (insert "NEXT [/] ")
               )
           (when (and (bound-and-true-p keyword) (not (string-prefix-p "[" title)))
               (message "TODO keyword but no progress indicator found")
               (forward-whitespace 2)
               (insert "[/] ")
               )
           )
    )

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "STRT(s)" "|" "DONE(d)" "DELEGATED(D)" "CANCELLED(c)")))

    (setq org-todo-keyword-faces
          '(("TODO" . "orange") ("NEXT" . "pink") ("STRT" . "green")
            ("DONE" . "grey") ("DELEGATED" . "blue") ("CANCELLED" "yellow")))

    (setq org-tags-column 12)
    (setq org-fast-tag-selection-single-key t)
    (setq org-hide-leading-stars t)
    (setq org-startup-indented t)
  #+end_src  
* Helm-recoll
#+begin_src emacs-lisp
  (use-package helm-recoll
    :commands helm-recoll
    :init (setq helm-recoll-directories
                '(("Dropbox" . "~/.recoll"))))
#+end_src
