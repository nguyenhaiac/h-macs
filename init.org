#+TITLE: Emacs configuration file
#+AUTHOR: Nguyen Tien Hai
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

* Initialize the configuration
** Tangle & byte compile

Tangle and byte compile

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my--tangle-byte-compile-org ()
   "Tangles emacs.org and byte compiles ~/.emacs.d/"
     (interactive)
     (when (equal (buffer-name)
                  (concat "init.org"))
       (org-babel-tangle)
       (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))
#+END_SRC

Tangle

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--tangle-org ()
 "Tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)))
(add-hook 'after-save-hook #'my--tangle-org)

#+END_SRC
** Bootstrap straight.el
*** Install straight.el if not yet
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
*** Install use-package and set it to use straight by default
#+BEGIN_SRC emacs-lisp :tangle yes
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package 'org-plus-contrib)
#+END_SRC

** Better-default 
#+begin_src emacs-lisp
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper) ; Menu/App key
  (ido-mode nil)
  (use-package gcmh
    :config
    (gcmh-mode 1))
  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (use-package better-defaults)
  (global-hl-line-mode 1)
  (setq-default cursor-type 'bar)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq create-lockfiles nil)  ; stop creating .# files
  (global-auto-revert-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq
   cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
   inhibit-splash-screen t
   default-frame-alist '((font . "Inconsolata-10"))
   echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffe
   initial-scratch-message nil       ; Empty scratch buffer
   initial-major-mode 'org-mode      ; org mode by default
   custom-safe-themes t
   confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
   )
  (add-hook 'org-mode-hook 'visual-line-mode)
  (set-default 'truncate-lines nil)
  (ido-mode nil)
  (add-hook 'org-mode-hook 'hl-line-mode)
  (setq line-spacing 0.15)
  (lambda () (progn
    (setq left-margin-width 2)
    (setq right-margin-width 2)
    (set-window-buffer nil (current-buffer))))
  (setq org-tags-column 100)
#+end_src
** Detect system
#+begin_src emacs-lisp
  ;; Check if system is Microsoft Windows
  (defun my-system-type-is-windows ()
    "Return true if system is Windows-based (at least up to Win7)"
    (string-equal system-type "windows-nt")
    )

  ;; Check if system is GNU/Linux
  (defun my-system-type-is-gnu ()
    "Return true if system is GNU/Linux-based"
    (string-equal system-type "gnu/linux")
    )
#+end_src
* Aesthetic improvement
** Doom themes
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t))
#+end_src
** kaolin themes
#+begin_src emacs-lisp :tangle yes
  (use-package kaolin-themes
    :config
    (load-theme 'doom-one))
#+end_src
** Smart-mode-line
#+begin_src emacs-lisp :tangle no
  (use-package smart-mode-line-atom-one-dark-theme)
  (use-package smart-mode-line
    :config
    (setq sml/theme 'respectful)
    (sml/setup)
    (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":DBox:")))
#+end_src
** Material theme
#+begin_src emacs-lisp
  (use-package flatland-theme)
#+end_src
** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-lsp t
          doom-modeline-env-enable-python t
          doom-modeline-project-detection 'project))
#+end_src
* Utilities setup
** Geiser
#+begin_src emacs-lisp
  (use-package geiser)
#+end_src
** org-source code
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (scheme . t)))
#+end_src
** Org-pomodoro
#+begin_src emacs-lisp
  (use-package sound-wav)
  (use-package org-pomodoro
    :config
    (setq org-pomodoro-length 1
          org-pomodoro-short-break-length 5
          org-pomodoro-long-break-length 10))
#+end_src
** SICP Book
#+begin_src emacs-lisp
  (use-package sicp)
#+end_src
** Org-download
#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :bind
    (:map org-mode-map
          (("H-Y" . org-download-screenshot)
           ("H-y" . org-download-yank))))
  (when (my-system-type-is-windows)
    (setq org-download-screenshot-method "magick convert clipboard: %s")
    (setq-default org-download-image-dir "~/Dropbox/brain/images")
    )
#+end_src

** Hyperbole
#+begin_src emacs-lisp
  (use-package hyperbole)
#+end_src
** ivy and counsel bundle
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil) )
  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1))
  (use-package avy)
#+end_src
** Autocompletion with company-mode
#+begin_src emacs-lisp
  (use-package company
      :config
      (setq company-idle-delay 0.0
            company-minimum-prefix-length 1)
      (global-company-mode))
#+end_src
** Whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode))
#+end_src
** Org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** Undo-fu
#+begin_src emacs-lisp
  (use-package undo-fu)
#+end_src

** Deadgrep
#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src
** Org-mode GTD
*** Settings
#+begin_src emacs-lisp
  (require 'org-habit)
  (setq org-agenda-files (list "~/Dropbox/orggtd/todo.org"
                               "~/Dropbox/orggtd/mobile.org"
                               "~/Onedrive - ABB/tender.org"
                               "~/Dropbox/orggtd/emacs-bindings.org"))
  (setq org-refile-files (list "~/Dropbox/orggtd/todo.org"
                               "~/Dropbox/orggtd/mobile.org"
                               "~/Onedrive - ABB/tender.org"
                               "~/Dropbox/orggtd/someday.org"
                               "~/Dropbox/orggtd/references.org"))
  (setq spacemacs-theme-org-agenda-height nil
        org-agenda-start-day "-1d"
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-include-diary t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-with-log-mode t
        org-habit-following-days 7
        org-habit-preceding-days 10
        org-habit-show-habits-only-for-today t
        org-agenda-tags-column -102
        org-habit-graph-column 50
        org-clock-out-remove-zero-time-clocks t
        org-clock-out-when-done t
        org-clock-persist t)
#+end_src
*** Org-todo keywords
#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("STRT" . "yellow")
          ("NEXT" . "orange")
          ("WAIT" . "gray")
          ("TOREAD" . "green")
          ("CANCELED" . (:foreground "blue" :weight bold))))
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"  ; A task that needs doing & is ready to do
           "NEXT(n)"
           "STRT(s)"  ; A task that is in progress
           "WAIT(w)"  ; Something is holding up this task; or it is paused
           "TOREAD(r)"
           "|"
           "DONE(d)"  ; Task successfully completed
           "PHONE(p)"
           "READ(R)"
           "MEETING(m)"
           "KILL(k)")))
#+end_src
** Deft and zetteldeft
#+begin_src emacs-lisp
  (use-package deft
    :init
    (setq deft-extensions '("org" "md")
          deft-recursive t
          deft-directory "~/Dropbox/Archives"
          deft-use-filename-as-title t
          deft-file-naming-rules '((noslash . "-")
                                   (nospace . "-")
                                   (case-fn . downcase))))
  (use-package zetteldeft
    :after deft)
#+end_src
* Programming setup
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1))
#+end_src
** Emmet-mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode)
    (setq emmet-self-closing-tag-style " /"))
#+end_src
** Webmode
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist '(("django" . "\\.html\\'")))
    (setq web-mode-enable-auto-pairing nil))
#+end_src
** Magit - the king of git
#+begin_src emacs-lisp :tangle yes
 (use-package magit)
#+END_SRC
** Python with elpy
#+begin_src emacs-lisp :tangle yes
  (use-package elpy
    :if (my-system-type-is-windows)
    :config
    (elpy-enable))
#+END_SRC
** Blacken
#+begin_src emacs-lisp
  (use-package blacken)
#+end_src
** Python debugging with realgud
#+begin_src emacs-lisp :tangle yes
  (use-package realgud)
#+END_SRC
** Python with lsp mode
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :if (my-system-type-is-gnu)
    :commands lsp
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (python-mode . lsp))
#+end_src
** pyvenv
#+begin_src emacs-lisp :tangle yes
  (use-package pyvenv)
#+end_src
** C programming setup
#+begin_src emacs-lisp :tangle yes
  (use-package company-irony
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :hook ((c++-mode-hook . irony-mode)
           (c-mode-hook . irony-mode)
           (irony-mode-hook . irony-cdb-autosetup-compile-options)))
#+end_src
** vterm
#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :if (my-system-type-is-gnu))
  (use-package vterm-toggle
    :straight (vterm-toggle :type git :host github :repo "jixiuf/vterm-toggle")
    :if (my-system-type-is-gnu)
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '("^v?term.*"
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src
** rustic - rust mode for emacs
#+begin_src emacs-lisp :tangle yes
  (use-package rustic)
#+end_src
** yaml-mode
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode)
#+end_src
* Keybindings for specific modes
** Install general
#+begin_src emacs-lisp
  (use-package general)
#+end_src
** For windows movement
#+BEGIN_SRC emacs-lisp :tangle yes
  (general-define-key
   :keymaps 'global
   "C-x [" 'previous-buffer
   "C-x ]" 'next-buffer
   )
  (use-package ace-window
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i))
    (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
	  (?w aw-swap-window "Swap Windows")
	  (?M aw-move-window "Move Window")
	  (?c aw-copy-window "Copy Window")
	  (?j aw-switch-buffer-in-window "Select Buffer")
	  (?f aw-flip-window)
	  (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	  (?c aw-split-window-fair "Split Fair Window")
	  (?v aw-split-window-vert "Split Vert Window")
	  (?b aw-split-window-horz "Split Horz Window")
	  (?o delete-other-windows "Delete Other Windows")
	  (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
  )
#+END_SRC
** Leader keybindings
*** Define leader key
#+begin_src emacs-lisp :tangle yes
  (general-create-definer my-leader-def
    :prefix "C-c")
  (general-create-definer my-local-leader-def
    :prefix "C-c m")
#+end_src
*** General leader keybindings
**** General keybindings
#+begin_src emacs-lisp
  (my-leader-def
    "a" 'org-agenda
    "c" 'org-capture
    "r" 'deadgrep
    "d" '(:ignore t :which-key "Deft")
    "dd" 'deft
    "dn" 'zetteldeft-new-file
    "dr" 'deft-refresh
    "ds" 'zetteldeft-search-at-point
    "dc" 'zetteldeft-search-current-id
    "df" 'zetteldeft-follow-link
    "dF" 'zetteldeft-avy-file-search-ace-window
    "dl" 'zetteldeft-avy-link-search
    "dt" 'zetteldeft-avy-tag-search
    "dT" 'zetteldeft-tag-buffer
    "di" 'zetteldeft-find-file-id-insert
    "dI" 'zetteldeft-find-file-full-title-insert
    "do" 'zetteldeft-find-file
    "dn" 'zetteldeft-new-file
    "dN" 'zetteldeft-new-file-and-link
    "dr" 'zetteldeft-file-rename
    "dx" 'zetteldeft-count-words)
  (general-define-key
   "C-z" 'undo-fu-only-undo
   "C-S-z" 'undo-fu-only-redo)
#+end_src
**** Navigation
#+begin_src emacs-lisp
  (my-leader-def
   :keymaps 'global
   "w" '(:ignore t :which-key "+Windows")
   "wu" 'windmove-up
   "we" 'windmove-down
   "wn" 'windmove-right
   "wi" 'windmove-left
   "wo" 'ace-delete-window
   "wh" 'split-window-below
   "wv" 'split-window-right)
#+end_src
*** Org-mode local keymaps
#+begin_src emacs-lisp
  (my-local-leader-def
    :keymaps 'org-mode-map
    "y"  'org-store-link
    "p"  'org-insert-link
    "c"  '(:ignore t :which-key "+Clock")
    "ci" 'org-clock-in
    "cI" 'org-clock-in-last
    "co" 'org-clock-out)
#+end_src
*** Org-mode navigation
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'org-mode-map
   "H-n" 'outline-next-visible-heading
   "H-p" 'outline-previous-visible-heading
   "H-b" 'org-backward-heading-same-level
   "H-f" 'org-forward-heading-same-level
   "H-u" 'outline-up-heading)
#+end_src
** Smartparens
#+begin_src emacs-lisp
  (general-define-key
   "C-M-f" 'sp-forward-sexp
   "C-M-b" 'sp-backward-sexp
   "C-M-d" 'sp-down-sexp
   "C-M-k" 'sp-kill-sexp
   "C-M-w" 'sp-copy-sexp
   "M-<delete>" 'sp-unwrap-sexp
   "M-<backspace>" 'sp-backward-unwrap-sexp
   "C-M-t" 'sp-transpose-sexp
   "H-(" 'sp-wrap-round
   "H-{" 'sp-wrap-curly
   "H-[" 'sp-wrap-square)
#+end_src
* Helper functions
** Find book and open it with org noter 
#+begin_src emacs-lisp
  (defun my-findbook-counsel-fzf ()
      (interactive)
    (let ((counsel-fzf-cmd "find ~/Dropbox/Calibre | grep -E \"(*.pdf)\" | fzf -f \"%s\" "))
    (counsel-fzf)))
#+end_src
** Copy-line
#+begin_src emacs-lisp
    (defun copy-line (arg)
      "Copy lines (as many as prefix argument) in the kill ring.
        Ease of use features:
        - Move to start of next line.
        - Appends the copy on sequential calls.
        - Use newline as last char even on the last line of the buffer.
        - If region is active, copy its lines."
      (interactive "p")
      (let ((beg (line-beginning-position))
            (end (line-end-position arg)))
        (when mark-active
          (if (> (point) (mark))
              (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
            (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
        (if (eq last-command 'copy-line)
            (kill-append (buffer-substring beg end) (< end beg))
          (kill-ring-save beg end)))
      (kill-append "\n" nil)
      (beginning-of-line (or (and arg (1+ arg)) 2))
      (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))
#+end_src
