#+title: emacs configuration file
#+author: nguyen tien hai
#+babel: :cache yes
#+property: header-args :tangle ~/.emacs.d/init.el
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

* Initialize the configuration
** Tangle & byte compile
*** Tangle and byte compile

#+begin_src emacs-lisp :tangle yes
(setq gc-cons-threshold (* 50 1000 1000))
  (defun my--tangle-byte-compile-org ()
   "tangles emacs.org and byte compiles ~/.emacs.d/"
     (interactive)
     (when (equal (buffer-name)
                  (concat "init.org"))
       (org-babel-tangle)
       (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))
#+end_src

*** Tangle

#+begin_src emacs-lisp :tangle yes
(defun my--tangle-org ()
 "tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)))
(add-hook 'after-save-hook #'my--tangle-org)

#+end_src
** Bootstrap straight.el
*** install straight.el if not yet
#+begin_src emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
*** install use-package and set it to use straight by default
#+begin_src emacs-lisp :tangle yes
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (straight-use-package 'org-plus-contrib)
(setq org-modules nil)
#+end_src
** Better-default 
#+begin_src emacs-lisp
  (setq
   default-frame-alist '((font . "CaskaydiaCove NF-10"))
   tool-bar-mode nil
   menu-bar-mode nil)
#+end_src
#+begin_src emacs-lisp
  (modify-syntax-entry ?_ "w")
  (setq org-src-window-setup 'split-window-below)
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper) ; menu/app key
  (use-package gcmh
    :config
    (gcmh-mode 1))
  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (use-package better-defaults)
  (global-hl-line-mode 1)
  (global-auto-revert-mode t)
  (setq
   initial-major-mode 'org-mode      ; org mode by default
   custom-safe-themes t
   )
  (setq line-spacing 0.15)
  (lambda () (progn
    (setq left-margin-width 2)
    (setq right-margin-width 2)
    (set-window-buffer nil (current-buffer))))
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "scheme")))
  (setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
#+end_src
** Detect system
#+begin_src emacs-lisp
  ;; check if system is microsoft windows
  (defun my-system-type-is-windows ()
    "return true if system is windows-based (at least up to win7)"
    (string-equal system-type "windows-nt")
    )

  ;; check if system is gnu/linux
  (defun my-system-type-is-gnu ()
    "return true if system is gnu/linux-based"
    (string-equal system-type "gnu/linux")
    )
#+end_src
* Aesthetic improvement
** Gruvbox
   #+begin_src emacs-lisp
     (use-package gruvbox-theme)
     (load-theme 'gruvbox-light-soft)
   #+end_src
** smart-mode-line
#+begin_src emacs-lisp :tangle yes
  (use-package smart-mode-line
    :config
    (setq sml/theme 'respectful)
    (sml/setup)
    (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":dbox:")))
#+end_src
** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :defer t)
#+end_src
* Utilities setup
#+begin_src emacs-lisp
  (use-package general
    :defer t)
#+end_src
** Org-download
   #+begin_src emacs-lisp
     (use-package org-download
       :defer t
       :config 
       (setq-default org-download-image-dir "~/Dropbox/brain/image")
       (when (my-system-type-is-windows)
       (setq org-download-screenshot-method "magick convert clipboard: %s"))
       )
   #+end_src
** Org-roam
#+begin_src emacs-lisp
    (use-package org-roam
      :defer t
      :custom
      (org-roam-directory "~/Dropbox/brain"))
    (use-package company-org-roam
      :straight (:host github :repo "jethrokuan/company-org-roam")
      :defer t
      :config
      (push 'company-org-roam company-backends))
    (when (my-system-type-is-gnu)
      (setq org-roam-graph-executable "/usr/bin/dot"))
    (when (my-system-type-is-windows)
      (setq org-roam-graph-executable "c:/Program Files (x86)/Graphviz2.38/bin/fdp.exe")
      (setenv "TMP" "C:\\Users\\VNHANGU19\\AppData\\Local\\Temp"))

  (setq org-roam-graph-extra-config '(("overlap" . "false")
                                  
                                      ("splines" . "true")
                                      ))
  (setq org-roam-graph-node-extra-config '(("shape" . "circle")
                                           ("style" . "rounded,fileled")
                                           ("fillcolor" . "#EEEEEE")
                                           ("color" . "#C9C9C9")
                                           ("fontcolor" . "#111111")))
  (setq org-roam-graph-shorten-titles 'wrap)
  (setq org-roam-graph-max-title-length 50)
  (setq org-roam-graph-viewer "C:/Program Files/Mozilla Firefox/firefox.exe")

    (setq org-roam-capture-templates
          '(("d" "default" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "%<%Y%m%d%H%M%S>-${slug}"
            :head "#+TITLE: ${title}\n"
            :unnarrowed t)
           ("c" "from notes" plain (function org-roam--capture-get-point)
            "%i"
            :file-name "%<%Y%m%d%H%M%S>-${slug}"
            :head "#+TITLE: ${title}\n"
            :unnarrowed t))
          )
    (require 'org-roam-protocol)
    (defun my/org-roam--backlinks-list-with-content (file)
      (with-temp-buffer
        (if-let* ((backlinks (org-roam--get-backlinks file))
                  (grouped-backlinks (--group-by (nth 0 it) backlinks)))
            (progn
              (insert (format "\n\n* %d Backlinks\n"
                              (length backlinks)))
              (dolist (group grouped-backlinks)
                (let ((file-from (car group))
                      (bls (cdr group)))
                  (insert (format "** [[file:%s][%s]]\n"
                                  file-from
                                  (org-roam--get-title-or-slug file-from)))
                  (dolist (backlink bls)
                    (pcase-let ((`(,file-from _ ,props) backlink))
                      (insert (s-trim (s-replace "\n" " " (plist-get props :content))))
                      (insert "\n\n")))))))
        (buffer-string)))


    (defun my/org-export-preprocessor (backend)
      (let ((links (my/org-roam--backlinks-list-with-content (buffer-file-name))))
        (unless (string= links "")
          (save-excursion
            (goto-char (point-max))
            (insert (concat "\n* Backlinks\n") links)))))

    (add-hook 'org-export-before-processing-hook 'my/org-export-preprocessor)

#+end_src
** Org-capture advice
   #+begin_src emacs-lisp
     (defadvice org-capture
         (after make-full-window-frame activate)
       "Advise capture to be the only window when used as a popup"
       (if (equal "emacs-capture" (frame-parameter nil 'name))
           (delete-other-windows)))

     (defadvice org-capture-finalize
         (after delete-capture-frame activate)
       "Advise capture-finalize to close the frame"
       (if (equal "emacs-capture" (frame-parameter nil 'name))
           (delete-frame)))
     (defun org-journal-find-location ()
       ;; Open today's journal, but specify a non-nil prefix argument in order to
       ;; inhibit inserting the heading; org-capture will insert the heading.
       (org-journal-new-entry t)
       ;; Position point on the journal's top-level heading so that org-capture
       ;; will add the new entry as a child entry.
       (goto-char (point-min)))

     (setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                                    "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
                                   ("w" "Web site" entry
       (file "")
       "* %a :website:\n\n%U %?\n\n%:initial")))
   #+end_src
** evil
 #+begin_src emacs-lisp :tangle yes
  (use-package evil
    :init
    (setq evil-disable-insert-state-bindings t
          evil-want-C-i-jump t
          evil-want-C-u-scroll t
          evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-set-initial-state 'magit-mode 'emacs)
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'info-mode 'emacs)
    (evil-mode t))

  (use-package evil-commentary)
  (evil-commentary-mode)
#+end_src
** Evil-collection
   #+begin_src emacs-lisp :tangle no
     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
   #+end_src
** Ivy
   #+begin_src emacs-lisp
     (use-package ivy
       :config
       (ivy-mode 1))
     (use-package counsel
       :config
       (counsel-mode 1))
   #+end_src
** ESUP
   #+begin_src emacs-lisp
     (use-package esup)
   #+end_src
**

** Whichkey
   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode 1))
   #+end_src
** Company-mode
   #+begin_src emacs-lisp
     (use-package company
       :defer t
       :init
       (add-hook 'after-init-hook 'global-company-mode))
     (setq company-minimum-prefix-length 1
           company-idle-delay 0.0) ;; default is 0.2
   #+end_src
** Python
   #+begin_src emacs-lisp :tangle no
     (use-package lsp-mode
         :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
                 (python-mode . lsp)
                 ;; if you want which-key integration
                 (lsp-mode . lsp-enable-which-key-integration))
         :commands lsp)
     (setq lsp-prefer-capf t)
     (use-package pyvenv)
   #+end_src
** Elpy
   #+begin_src emacs-lisp
     (use-package elpy
       :init (elpy-enable))
   #+end_src
* Keybindings
  #+begin_src emacs-lisp
    (general-create-definer my-leader-def
      :states '(normal motion visual)
      :prefix "SPC")
  #+end_src
** Global keybindings
   #+begin_src emacs-lisp
     (my-leader-def
       :keymaps 'override
       "." 'counsel-find-file
       "o" '(:ignore t :wk "Org-mode")
       "oa" 'org-agenda
       "oc" 'org-capture
       "n" '(:ignore t :wk "Notes")
       "nr" '(:ignore t :wk "Roams")
       "nrr" 'org-roam
       "nrf" 'org-roam-find-file
       "nrc" 'org-roam-capture
       "nrg" 'org-roam-graph
       "nri" 'org-roam-insert)
   #+end_src
