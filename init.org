#+TITLE: Emacs configuration file
#+AUTHOR: Nguyen Tien Hai
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC


* Initialize the configuration
** Tangle & byte compile

Tangle and byte compile

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my--tangle-byte-compile-org ()
   "Tangles emacs.org and byte compiles ~/.emacs.d/"
     (interactive)
     (when (equal (buffer-name)
                  (concat "init.org"))
       (org-babel-tangle)
       (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))
  (add-hook 'after-save-hook #'my--tangle-byte-compile-org)
#+END_SRC

Tangle

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--tangle-org ()
 "Tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)))
(add-hook 'after-save-hook #'my--tangle-org)

#+END_SRC
** Bootstrap straight.el
*** Install straight.el if not yet
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
*** Install use-package and set it to use straight by default
#+BEGIN_SRC emacs-lisp :tangle yes
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package 'org-plus-contrib)
#+END_SRC

** Better-default 
#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (gcmh-mode 1))
  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (use-package better-defaults)
  (global-hl-line-mode 1)
  (setq-default cursor-type 'bar)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq create-lockfiles nil)  ; stop creating .# files
  (global-auto-revert-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq
   cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
   inhibit-splash-screen t
   default-frame-alist '((font . "Source Code Pro-12"))
   echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffe
   initial-scratch-message nil       ; Empty scratch buffer
   initial-major-mode 'org-mode      ; org mode by default
   custom-safe-themes t
   confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
   )
  (modify-syntax-entry ?_ "w")
#+end_src
* Utilities setup
** ivy and counsel bundle
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
    '((swiper . ivy--regex-plus)
     (t      . ivy--regex-fuzzy))))
  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1))
  (use-package smex)
  (use-package flx)
  (use-package avy)
#+end_src

** Autocompletion with company-mode
#+begin_src emacs-lisp
  (use-package company
      :config
      (setq company-idle-delay 0.0
            company-minimum-prefix-length 1)
      (global-company-mode))
#+end_src
** Posframe and ivy-posframe
#+begin_src emacs-lisp
  (use-package posframe)
  (use-package ivy-posframe
    :config
    (setq ivy-posframe-display-functions-alist
          '((swiper          . ivy-posframe-display-at-frame-center)
            (swiper-isearch  . ivy-posframe-display-at-frame-center)
            (complete-symbol . ivy-posframe-display-at-point)
            (counsel-M-x     . ivy-posframe-display-at-frame-center)
            (counsel-find-file     . ivy-posframe-display-at-frame-center)
            (t               . ivy-posframe-display)))
    (ivy-posframe-mode 1)
  )
#+end_src
** Whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** Deft and zettledeft
*** Deft
#+begin_src emacs-lisp
  (use-package deft
    :defer t
    :commands (deft))
  (setq deft-directory "~/Dropbox/Archives"
                      deft-text-mode 'org-mode
                      deft-extensions '("org")
                      deft-recursive t
                      deft-use-filename-as-title nil)
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  (setq deft-org-mode-title-prefix t)
#+end_src
*** Zetteldeft
#+begin_src emacs-lisp
  (use-package zetteldeft
    :straight (zetteldeft :type git :host github :repo "EFLS/zetteldeft"))
#+end_src

** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode)
    (require 'smartparens-config))
#+end_src

** hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src
*** Some useful hydra
**** Orgclock timer
#+begin_src emacs-lisp :tangle yes
  (defhydra hydra-org-clock (:color blue :hint nil)
     "
  Clock   In/out^     ^Edit^   ^Summary     (_?_)
  -----------------------------------------
          _i_n         _e_dit   _g_oto entry
          _c_ontinue   _q_uit   _d_isplay
          _o_ut        ^ ^      _r_eport
        "
     ("i" org-clock-in)
     ("o" org-clock-out)
     ("c" org-clock-in-last)
     ("e" org-clock-modify-effort-estimate)
     ("q" org-clock-cancel)
     ("g" org-clock-goto)
     ("d" org-clock-display)
     ("r" org-clock-report)
     ("?" (org-info "Clocking commands")))
#+end_src
**** Smartparens
#+begin_src emacs-lisp
  (defhydra hydra-smartparens (:hint nil)
    "
   Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
  ------------------------------------------------------------------------------------------------------------------------
   [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
   [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
   [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
   [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit"
    ;; Moving
    ("a" sp-beginning-of-sexp)
    ("e" sp-end-of-sexp)
    ("f" sp-forward-sexp)
    ("b" sp-backward-sexp)
    ("n" sp-down-sexp)
    ("N" sp-backward-down-sexp)
    ("p" sp-up-sexp)
    ("P" sp-backward-up-sexp)

    ;; Slurping & barfing
    ("h" sp-backward-slurp-sexp)
    ("H" sp-backward-barf-sexp)
    ("l" sp-forward-slurp-sexp)
    ("L" sp-forward-barf-sexp)

    ;; Wrapping
    ("R" sp-rewrap-sexp)
    ("u" sp-unwrap-sexp)
    ("U" sp-backward-unwrap-sexp)
    ("(" sp-wrap-round)
    ("{" sp-wrap-curly)
    ("[" sp-wrap-square)

    ;; Sexp juggling
    ("S" sp-split-sexp)
    ("s" sp-splice-sexp)
    ("r" sp-raise-sexp)
    ("j" sp-join-sexp)
    ("t" sp-transpose-sexp)
    ("A" sp-absorb-sexp)
    ("E" sp-emit-sexp)
    ("o" sp-convolute-sexp)

    ;; Destructive editing
    ("c" sp-change-inner :exit t)
    ("C" sp-change-enclosing :exit t)
    ("k" sp-kill-sexp)
    ("K" sp-backward-kill-sexp)
    ("w" sp-copy-sexp)

    ("q" nil)
    ("g" nil))
#+end_src
**** Lsp mode
#+begin_src emacs-lisp :tangle yes
  (defhydra hydra-lsp (:exit t :hint nil)
    "
   Buffer^^               Server^^                   Symbol
  -------------------------------------------------------------------------------------
   [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
   [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
   [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
    ("d" lsp-find-declaration)
    ("D" lsp-ui-peek-find-definitions)
    ("R" lsp-ui-peek-find-references)
    ("i" lsp-ui-peek-find-implementation)
    ("t" lsp-find-type-definition)
    ("s" lsp-signature-help)
    ("o" lsp-describe-thing-at-point)
    ("r" lsp-rename)

    ("f" lsp-format-buffer)
    ("m" lsp-ui-imenu)
    ("x" lsp-execute-code-action)

    ("M-s" lsp-describe-session)
    ("M-r" lsp-restart-workspace)
    ("S" lsp-shutdown-workspace))
#+end_src
**** Apropos commands
#+begin_src emacs-lisp :tangle yes
  (defhydra hydra-apropos (:color blue)
    "Apropos"
    ("a" apropos "apropos")
    ("c" apropos-command "cmd")
    ("d" apropos-documentation "doc")
    ("e" apropos-value "val")
    ("l" apropos-library "lib")
    ("o" apropos-user-option "option")
    ("u" apropos-user-option "option")
    ("v" apropos-variable "var")
    ("i" info-apropos "info")
    ("t" tags-apropos "tags")
    ("z" hydra-customize-apropos/body "customize"))
#+end_src
**** Transposing
#+begin_src emacs-lisp :tangle yes
  (defhydra hydra-transpose (:color red)
  "Transpose"
   ("c" transpose-chars "characters")
   ("w" transpose-words "words")
   ("o" org-transpose-words "Org mode words")
   ("l" transpose-lines "lines")
   ("s" transpose-sentences "sentences")
   ("e" org-transpose-elements "Org mode elements")
   ("p" transpose-paragraphs "paragraphs")
   ("t" org-table-transpose-table-at-point "Org mode table")
   ("q" nil "cancel" :blue color))
#+end_src
**** Rectangle operation
#+begin_src emacs-lisp :tangle yes
  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                       :color pink
                                       :hint nil
                                       :post (deactivate-mark))
    "
    ^_u_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
  _n_   _i_     _y_ank        _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
    ^_e_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
  ^^^^          _U_ndo        _g_ quit     ^ ^                     '---''(./..)-'(_\_)
  "
   ("u" rectangle-previous-line)
   ("e" rectangle-next-line)
   ("n" rectangle-backward-char)
   ("i" rectangle-forward-char)
   ("d" kill-rectangle)                    ;; C-x r k
   ("y" yank-rectangle)                    ;; C-x r y
   ("w" copy-rectangle-as-kill)            ;; C-x r M-w
   ("o" open-rectangle)                    ;; C-x r o
   ("t" string-rectangle)                  ;; C-x r t
   ("c" clear-rectangle)                   ;; C-x r c
   ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
   ("N" rectangle-number-lines)            ;; C-x r N
   ("r" (if (region-active-p)
            (deactivate-mark)
          (rectangle-mark-mode 1)))
   ("U" undo nil)
   ("g" nil))
#+end_src
** Undotree

#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src
** Deadgrep
#+begin_src emacs-lisp 
  (use-package deadgrep)
#+end_src
** Org-helm-rifle
#+begin_src emacs-lisp :tangle yes
  (use-package helm-org-rifle)
  (defun hai/helm-org-rifle-archives ()
    "Rifle through Archives folder"
    (interactive)
    (helm-org-rifle-directories "~/Dropbox/orggtd/"))
#+end_src
** Org-webtools
#+begin_src emacs-lisp
  (use-package org-web-tools)
#+end_src
** Elfeed
*** Elfeed itself
  #+begin_src emacs-lisp :tangle yes
    (use-package elfeed)
  #+end_src
*** Elfeed-org
#+begin_src emacs-lisp
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets/")))
#+end_src
** org-protocol-capture-html
#+begin_src emacs-lisp
  (require 'org-protocol)
  (use-package org-protocol-capture-html
    :straight (org-protocol-capture-html :type git :host github :repo "alphapapa/org-protocol-capture-html"))
#+end_src
* Orgmode setup
** General setup
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-refile-use-outline-path 'file)
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-agenda-time-grid
        (quote
         ((daily today remove-match)
          (900 1100 1300 1500 1700)
          "......" "----------------")))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-targets '((org-refile-files :maxlevel . 3)))

#+END_SRC
** Agenda setup
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-habit)
(setq spacemacs-theme-org-agenda-height nil
      org-agenda-start-day "-1d"
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)
#+END_SRC
*** Habit and clocking
#+BEGIN_SRC emacs-lisp :tangle yes
(setq  org-habit-following-days 7
       org-habit-preceding-days 10
       org-habit-show-habits-only-for-today t)
(setq org-agenda-tags-column -102)
(setq org-habit-graph-column 50)
(setq org-clock-out-remove-zero-time-clocks t)
(setq org-clock-out-when-done t)
(setq org-clock-persist t)
#+END_SRC
** Org-todo-keywords
#+BEGIN_SRC emacs-lisp :tangle yes
  (custom-declare-face '+org-todo-active '((t (:inherit (bold font-lock-constant-face org-todo)))) "")
  (custom-declare-face '+org-todo-project '((t (:inherit (bold font-lock-doc-face org-todo)))) "")
  (custom-declare-face '+org-todo-onhold '((t (:inherit (bold warning org-todo)))) "")
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"  ; A task that needs doing & is ready to do
           "NEXT(n)"
           "STRT(s)"  ; A task that is in progress
           "WAIT(w)"  ; Something is holding up this task; or it is paused
           "TOREAD(r)"
           "|"
           "DONE(d)"  ; Task successfully completed
           "PHONE(p)"
           "READ(R)"
           "MEETING(m)"
           "KILL(k)")))
#+END_SRC
*** Org-agenda config
** Org-super-agenda setting
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files (list "~/Dropbox/orggtd/todo.org"
                               "~/Dropbox/orggtd/mobile.org"
                               "~/Onedrive - ABB/tender.org"))
  (setq org-refile-files (list "~/Dropbox/orggtd/todo.org"
                               "~/Dropbox/orggtd/mobile.org"
                               "~/Onedrive - ABB/tender.org"
                               "~/Dropbox/orggtd/someday.org"
                               "~/Dropbox/orggtd/references.org"))
  (use-package org-super-agenda
    :config
    (org-super-agenda-mode))
  (setq org-agenda-custom-commands
        '(("z" "Super zaen view"
           ((agenda "" ((org-agenda-span 5)
                        (org-super-agenda-groups
                         '((:name "Habit"
                                  :habit t)

                           (:name "Schedule"
                                  :time-grid t
                                  :scheduled t
                                  :order 2)
                           (:discard (:anything t))))))

            (alltodo "" ((org-agenda-overriding-header "Refile")
                         (org-super-agenda-groups
                          '((:name none
                                   :tag "REFILE"
                                   )
                            (:discard (:anything t))
                            ))))

            (alltodo "" ((org-agenda-overriding-header "Project Task")
                        (org-agenda-skip-function 'bh/skip-non-project-tasks)
                        (org-super-agenda-groups
                         '((:discard (:tag "REFILE"))
                           (:name none
                                   :todo t
                                   :order 1)))))
          
            (alltodo "" ((org-agenda-overriding-header "STARTED")
                        (org-agenda-skip-function 'bh/skip-non-project-tasks)
                        (org-super-agenda-groups
                         '((:discard (:tag "REFILE"))
                           (:name none
                                   :todo (:tag ("STRT"))
                                   :order 1)))))
          
            (alltodo "" ((org-agenda-overriding-header "Active Project")
                         (org-super-agenda-groups
                          '((:discard (:tag "REFILE"))
                            (:name none
                                   :children "NEXT"
                                   :order 1)
                            (:discard (:anything t))))))

            (alltodo "" ((org-agenda-overriding-header "Next Task")
                         (org-super-agenda-groups
                          '((:discard (:tag "REFILE"))
                            (:name none
                                   :discard (:not (:todo "NEXT"))
                                   :discard (:habit)
                                   :order 1)
                            (:name none
                                   :todo "NEXT"
                                   :face (:background "" :underline t))
                            ))))


            (alltodo "" ((org-agenda-overriding-header "Standalone Task")
                         (org-agenda-skip-function 'bh/skip-project-tasks)
                         (org-super-agenda-groups
                          '((:discard (:tag "REFILE"))
                            (:name none
                                   :todo ("TODO" "WAIT")
                                   :order 1)
                            (:discard (:anything t))))))

            (alltodo "" ((org-agenda-overriding-header "Stuck Project")
                         (org-super-agenda-groups
                          '((:discard (:tag "REFILE"))
                            (:name none
                                   :discard (:children "NEXT")
                                   :order 1)
                            (:name none
                                   :discard (:children nil)
                                   :order 1)
                            (:name none
                                   :children todo)))))
            ))
          ("b" "books" alltodo "" ((org-agenda-overriding-header "Books to read")
                                (org-super-agenda-groups
                                 '((:name none
                                          :todo "TOREAD")
                                   (:discard (:anything t))))))
          ))
#+END_SRC
** Org-capture

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        (quote (("t" "todo" entry (file+headline "~/Dropbox/orggtd/todo.org" "Inbox")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("n" "note" entry (file "~/Dropbox/orggtd/notes.org")
                 "* %? %^G :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("w" "Web site" entry (file+headline "~/Dropbox/orggtd/todo.org" "Inbox")
                 "* %a :website:\n\n%U %?\n\n%:initial" :immediate-finish t)
                ("j" "Journal" entry (file+datetree "~/Dropbox/orggtd/journal.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("m" "Meeting" entry (file "~/Dropbox/orggtd/todo.org")
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("r" "Reading list" entry (file+headline "~/Dropbox/orggtd/todo.org" "ToRead")
                 "* TOREAD %?\n:PROPERTIES:\n:SERIES:\n:AUTHOR:\n:RATING:\n:ADDED:%U\n:END:")
                ("p" "Phone call" entry (file "~/Dropbox/orggtd/todo.org")
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file "~/Dropbox/orggtd/todo.org")
                 "* NEXT %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPERTIES:\n:CREATED: %U\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:LOGGING: DONE(!)\n:ARCHIVE: %%s_archive::* Habits\n:END:\n%U\n"
                 ))))
#+END_SRC

** Org-babel setting
   #+begin_src emacs-lisp :tangle yes
          (org-babel-do-load-languages
           'org-babel-load-languages
           '((ruby . t)
             (dot . t)
             (groovy . t)
             (shell . t)
             (python . t)
             (emacs-lisp . t)
             (matlab . t)
             (latex . t)
             (C . t)
             (J . t)
             (java . t)
             (scheme . t)
             (lisp . t)
             (latex . t)
             (R . t)
             (sql . t)
             (calc . t)))

          (eval-when-compile
            (require 'ob-C)
            (require 'ob-ruby)
            (require 'ob-python)
            (require 'ob-scheme)
            (require 'ob-clojure))
          (setq org-confirm-babel-evaluate nil)
   #+end_src

   #+RESULTS:

*** Org babel header
    #+begin_src emacs-lisp :tangle yes
      ;;* Python
      (setq org-babel-default-header-args:python
	    '((:results . "output")))
      (setq org-babel-python-command "python3")

      ;;* Bash
      (setq org-babel-default-header-args:sh
	    '((:results . "verbatim")))
      (setq org-babel-default-header-args:bash
	    '((:results . "verbatim")))

      (setq org-babel-default-header-args:C
	    '((:results . "org")
	      (:exports . "both")))
    #+end_src
* Aesthetic improvement
** Doom themes
#+begin_src emacs-lisp :tangle no
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-one t))
#+end_src
** kaolin themes
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :config
    (load-theme 'kaolin-valley-light t))
#+end_src
** Smart-mode-line
#+begin_src emacs-lisp
  (use-package smart-mode-line-atom-one-dark-theme)
  (use-package smart-mode-line
    :config
    (setq sml/theme 'respectful)
    (sml/setup)
    (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":DBox:")))
#+end_src
* Programming setup
** Magit - the king of git
#+begin_src emacs-lisp :tangle yes
 (use-package magit)
#+END_SRC
** Python with elpy
#+begin_src emacs-lisp :tangle yes
  (use-package elpy
    :config
    (elpy-enable))
#+END_SRC
** Python debugging with realgud
#+begin_src emacs-lisp :tangle yes
  (use-package realgud)
#+END_SRC
** Python with lsp mode
#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :commands lsp
   (use-package company-lsp :commands company-lsp)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src
** pyvenv
#+begin_src emacs-lisp :tangle yes
  (use-package pyvenv)
#+end_src
** C programming setup
#+begin_src emacs-lisp :tangle yes
  (use-package company-irony
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :hook ((c++-mode-hook . irony-mode)
           (c-mode-hook . irony-mode)
           (irony-mode-hook . irony-cdb-autosetup-compile-options)))
#+end_src
** vterm
#+begin_src emacs-lisp :tangle no
  (use-package vterm)
  (use-package vterm-toggle
    :straight (vterm-toggle :type git :host github :repo "jixiuf/vterm-toggle")
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '("^v?term.*"
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src
** rustic - rust mode for emacs
#+begin_src emacs-lisp :tangle yes
  (use-package rustic)
#+end_src
** yaml-mode
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode)
#+end_src
* Keybindings for specific modes
** Install general
#+begin_src emacs-lisp
  (use-package general)
#+end_src
** Unbind keybindings
#+begin_src emacs-lisp
  (general-unbind
    "C-/")
#+end_src
** For windows movement
#+BEGIN_SRC emacs-lisp :tangle yes
  (general-define-key
   :keymaps 'global
   "C-x [" 'previous-buffer
   "C-x ]" 'next-buffer
   )
  (use-package ace-window
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i))
    (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
	  (?w aw-swap-window "Swap Windows")
	  (?M aw-move-window "Move Window")
	  (?c aw-copy-window "Copy Window")
	  (?j aw-switch-buffer-in-window "Select Buffer")
	  (?f aw-flip-window)
	  (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	  (?c aw-split-window-fair "Split Fair Window")
	  (?v aw-split-window-vert "Split Vert Window")
	  (?b aw-split-window-horz "Split Horz Window")
	  (?o delete-other-windows "Delete Other Windows")
	  (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
  )
#+END_SRC
** For orgmode navigation
#+begin_src emacs-lisp :tangle yes
  (general-define-key
   :keymap 'org-mode-map
   "H-n" 'org-next-visible-heading
   "H-p" 'org-previous-visible-heading
   "H-b" 'org-backward-heading-same-level
   "H-f" 'org-forward-heading-same-level
   "H-o ." 'org-demote-subtree
   "H-o ," 'org-promote-subtree
   )
#+end_src
** Prefix commands
*** Hyper-C prefix
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'global
   :prefix "H-c"
   "d" '(:ignore t :which-key "Deft")
   "dd" 'deft
   "dn" 'zetteldeft-new-file
   "dN" 'zetteldeft-new-file-and-link
   "dr" 'zetteldeft-file-rename
   "ds" 'zetteldeft-search-at-point
   "dc" 'zetteldeft-search-current-id
   "df" 'zetteldeft-follow-link
   "dF" 'zetteldeft-avy-file-search-ace-window
   "dl" 'zetteldeft-avy-link-search
   "dt" 'zetteldeft-avy-tag-search
   "dT" 'zetteldeft-tag-buffer
   "di" 'zetteldeft-find-file-id-insert
   "dI" 'zetteldeft-find-file-full-title-insert
   "do" 'zetteldeft-find-file
   )
#+end_src
*** Control-C prefix
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'global
   :prefix "C-c"
   "o" 'org-agenda
   "c" 'org-capture
   "n" '((lambda() (interactive)(org-capture nil "n")) :which-key "Taking notes")
   "f" 'hai/helm-org-rifle-archives
   "w" 'hydra-org-clock/body
   "s" 'hydra-smartparens/body
   "l" 'hydra-lsp/body
   "a" 'hydra-apropos/body
   "t" 'hydra-transpose/body
   "e" 'elfeed
   "r" 'hai/helm-org-rifle-archives
   )
#+end_src
** Non-prefix keybindings
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'global
   "H-," 'my-pop-local-mark-ring
   "H-." 'unpop-to-mark-command
   "H-<" 'previous-buffer
   "H->" 'next-buffer
   "M-<SPC>" 'set-mark-command
   "C-z" 'undo-tree-undo
   "C-S-z" 'undo-tree-redo
   "C-s" 'swiper-isearch
   "H-t" 'vterm-toggle
   "H-s" 'deadgrep
  )
#+end_src
** Smartparens
#+begin_src emacs-lisp
  (general-define-key
   :keymap 'global
   "C-M-'" 'negative-argument)
  (sp-pair "(" ")" :wrap "H-(")
  (sp-pair "[" "]" :wrap "H-[")
  (sp-pair "{" "}" :wrap "H-{")

#+end_src
* Helper functions
** Save and navigate back and forth when save
  #+begin_src emacs-lisp
  (defun my-pop-local-mark-ring ()
    (interactive)
    (set-mark-command t))

  (defun unpop-to-mark-command ()
    "Unpop off mark ring. Does nothing if mark ring is empty."
    (interactive)
        (when mark-ring
          (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
          (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
          (when (null (mark t)) (ding))
          (setq mark-ring (nbutlast mark-ring))
          (goto-char (marker-position (car (last mark-ring))))))
#+end_src
** Org-mode helper function

#+BEGIN_SRC emacs-lisp :tangle yes
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/skip-non-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-task-p)
        nil)
       (t
        next-headline)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))


(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))
#+END_SRC

** Convert Transformer task to Design name
#+begin_src emacs-lisp
  (defun print-prop ()
    (let* ((props (org-entry-properties))
           (tap (cdr (assoc '"TAPCHANGER" props)))
           (mva (cdr (assoc '"MVA" props)))
           (hv (cdr (assoc '"HV" props)))
           (lv (cdr (assoc '"LV" props)))
           (tv (cdr (assoc '"TV" props)))
           (tapping (cdr (assoc '"TAPPING" props)))
           (name (cdr (assoc '"ITEM" props)))
           (vector (cdr (assoc '"VECTOR" props)))
           (cooling (cdr (assoc '"COOLING" props)))
           (str (concat "VT" name "-" hv " " tapping
                        "-" lv
                        "-" tv
                        "-" vector
                        "-" tap
                        "-" cooling)))
      (insert str)
    ))
#+end_src
